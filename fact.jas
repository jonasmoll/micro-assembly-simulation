////	
//	Java Assembly Program for the Mic1 Microarchitecture Simulator 
//	
//	File
//		fact.jas
//	
//	Time-stamp: <Tuesday 24 May 2005, 16:16:13 - by jermiin>
//  
//	Author
//		Jonas Jermiin Ravn Moll <jonas@jermiin.dk>
//		
//  Description
//		Program to compute the factorial of a given integer value (represented by the constant 'k')
//
//  Usage
//		To compile:  java ijvmasm fact.jas
//      This will create fact.ijvm
//
//	To run
//		java mic1sim mic1ijvm.mic1 fact.ijvm
//      Click the Run button
//		NB! Note that the final result is printed as hex-value
////

.constant
k 0x4			// Represents the initial value for the factorial computation
OBJREF 0x40		// Needed for method invokation, see Andrew Tanenbaum S.C.O chap. 4
.end-constant

.main
.var
n
i
.end-var
	
start:	BIPUSH 0x0
		ISTORE n			// Initialize n (n = 0)
		BIPUSH 0x1
		ISTORE i			// Initialize i (i = 1)
		LDC_W k
		ISTORE n			// n = k
		ILOAD n
		BIPUSH 0x1
		IF_ICMPEQ done		// if(n == 1) goto done 
		ILOAD n
		BIPUSH 0x1
		ISUB
		DUP					// Duplicate for later method call
		ISTORE n			// n-1
		LDC_W k
		INVOKEVIRTUAL mul	// mul(n,k)
		DUP
		ISTORE i
second:	ILOAD n				// HACK for making the loop possible
		BIPUSH 0x1
		IF_ICMPEQ done		// if(n == 1) goto done 
		ILOAD n
		BIPUSH 0x1
		ISUB
		DUP					// Duplicate for later method argument
		ISTORE n			// n-1
		LDC_W OBJREF	
		SWAP				// Get the value of n on top
		ILOAD i
		INVOKEVIRTUAL mul	// mul(n,i)
		ISTORE i
		GOTO second
done:	LDC_W OBJREF
		ILOAD i
		INVOKEVIRTUAL print	// print the final result
		POP
		HALT
.end-main

.method mul(a, x)
.var
j							// Counter
tmp							// Holding the original value
.end-var
		ILOAD a
		DUP
		ISTORE tmp			// tmp = a
		DUP	   			
		IADD			
		ISTORE a			// a = a + a
		BIPUSH 0x2
		ISTORE j			// j = 2
loop:	ILOAD j
		ILOAD x
		IF_ICMPEQ return	// if(x == j) goto return
		ILOAD tmp
		ILOAD a
		IADD
		ISTORE a			// a = a + tmp
		IINC j 0x1			// j++
		GOTO loop
return:	ILOAD a
		IRETURN
.end-method

//////////////////////
// The method below converts a number into a string of
// characters and prints them.  All the characters
// are pushed onto the stack, least significant
// digit first, then popped off and printed.
// Original version by Dan Stone (http://www.ontko.com/mic1/jas.html)
//////////////////////

.method print( total ) 		
.var
place
index
.end-var

print: 	BIPUSH 0x9		// there are 8 nibbles in each integer--setting
						//   this as nine pushes 10 characters onto the
 						//   stack, thus a total of ten printed digits,
						//   but setting this less does not remove the
						//   two leading zeros, just removes significant
						//   digits
		ISTORE index
		BIPUSH 0x1		// comparison bit
		ISTORE place
print1:	BIPUSH 0x0
		ILOAD index		// index = index - 1
		BIPUSH 0x1
		ISUB
		DUP
		IFEQ pall		// if index = 0  goto pall
		ISTORE index
		ILOAD total		// else
		ILOAD place		//
		IAND			//   if 1st bit of current nibble is zero (total & place)
		IFEQ print2		//     goto print2
		BIPUSH 0x1		//   else set first bit of character
		IADD
print2: ILOAD place		//   place = place << 1 
		DUP
		IADD
		ISTORE place
		ILOAD total
		ILOAD place
		IAND			//   if 2nd bit of current nibble is zero (total & place)
		IFEQ print3		//     goto print3
		BIPUSH 0x2		//   else set second bit of character
		IADD	
print3: ILOAD place		//   place = place << 1
		DUP
		IADD
		ISTORE place
		ILOAD total
		ILOAD place
		IAND			//   if 3rd bit of current nibble is zero (total & place)
		IFEQ print4		//     goto print4
		BIPUSH 0x4		//   else set second bit of character
		IADD	
print4: ILOAD place		//   place = place << 1
		DUP
		IADD
		ISTORE place
		ILOAD total
		ILOAD place
		IAND			//   if 4th bit of current nibble is zero (total & place)
		IFEQ print5		//     goto print5
		BIPUSH 0x8		//   else set second bit of character
		IADD	
print5: ILOAD place		//   place = place << 1
		DUP
		IADD
		ISTORE place
		GOTO print1
		
pall:   POP			// Pop off leading 0's
		POP
		BIPUSH 0x9
		ISTORE index
pall1:	ILOAD index		// index = index - 1
		BIPUSH 0x1
		ISUB
		DUP
		IFEQ return		// if index = 0  return
		ISTORE index
		DUP
		BIPUSH 0xa		// else if character < 0xa goto pall1
		ISUB
		IFLT pall2
		BIPUSH 0x37		// else convert character to "A"-"F"
		IADD
		OUT			// print character
		GOTO pall1		// goto pall (prepare & print next character)
pall2:	BIPUSH 0x30		// convert character to "0"-"9"
		IADD
		OUT			// print character
		GOTO pall1		// goto pall1 (prepare & print next character)
return:	BIPUSH 0xa		// print cr
		OUT
		IRETURN			// no return value
.end-method
